{
	"info": {
		"_postman_id": "1da77eed-083d-4cb2-86fb-2ea37cf99434",
		"name": "crud",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3693486"
	},
	"item": [
		{
			"name": "login using admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"pm.test(\"response has token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.token).to.be.a('string');",
							"    pm.environment.set(\"token\", jsonData.token);",
							"",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"{{adminUsername}}\",\n\t\"password\": \"{{adminPassword}}\"\n}"
				},
				"url": {
					"raw": "{{host}}/authentication",
					"host": [
						"{{host}}"
					],
					"path": [
						"authentication"
					]
				}
			},
			"response": []
		},
		{
			"name": "add org a",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has org a\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.orgs[0].id).to.eql('a');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"orgs\": [\n\t\t{\n\t\t\t\"id\": \"a\",\n\t\t\t\"name\": \"a\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/orgs",
					"host": [
						"{{host}}"
					],
					"path": [
						"orgs"
					]
				}
			},
			"response": []
		},
		{
			"name": "get orgs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has at least 1 org\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.orgs.length).to.be.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/orgs",
					"host": [
						"{{host}}"
					],
					"path": [
						"orgs"
					]
				}
			},
			"response": []
		},
		{
			"name": "add project aa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has project aa\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.projects[0].id).to.eql('aa');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"projects\": [\n\t\t{\n\t\t\t\"id\": \"aa\", \n\t\t\t\"name\": \"aa\",\n\t\t\t\"orgId\": \"a\",\n\t\t\t\"schema\": \"default\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "try to add invalid project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"projects\": [\n\t\t{\n\t\t\t\"id\": \"invalid project\", \n\t\t\t\"name\": \"invalid project\",\n\t\t\t\"orgId\": \"a\",\n\t\t\t\"schema\": \"default\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "get projects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has at least 1 project\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.projects.length).to.be.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/projects",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project aa metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has project aa\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.projects[0].id).to.eql('aa');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"projects\": [\n\t\t{\n\t\t\t\"id\": \"aa\", \n\t\t\t\"extraField\": \"something\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "get project aa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has project aa with extra field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.projects[0].extraField).to.eql('something');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/projects/aa",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa"
					]
				}
			},
			"response": []
		},
		{
			"name": "add elements to aa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has elements\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(3);",
							"});",
							"",
							"pm.environment.set(\"commitId1\", pm.response.json().elements[0]._commitId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\",\n\t\t\t\"name\": \"x\"\n\t\t}, {\n\t\t\t\"id\": \"y\", \n\t\t\t\"name\": \"y\"\n\t\t}, {\n\t\t\t\"id\": \"z\",\n\t\t\t\"name\": \"z\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all elements returns last commitId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has 3 elements and correct commitId\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(3);",
							"    pm.expect(jsonData.commitId).to.eql(pm.environment.get(\"commitId1\"))",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "post elements with wrong lastCommitId results in 409",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{   \"lastCommitId\": \"blah\",\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\",\n\t\t\t\"name\": \"x\"\n\t\t}, {\n\t\t\t\"id\": \"y\", \n\t\t\t\"name\": \"y\"\n\t\t}, {\n\t\t\t\"id\": \"z\",\n\t\t\t\"name\": \"z\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "update x",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has elements\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(1);",
							"});",
							"",
							"pm.environment.set(\"commitId2\", pm.response.json().elements[0]._commitId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\",\n\t\t\t\"name\": \"updated1\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "update x and y",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has elements\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(2);",
							"});",
							"",
							"pm.environment.set(\"commitId3\", pm.response.json().elements[0]._commitId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\",\n\t\t\t\"name\": \"updated2\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"y\",\n\t\t\t\"name\": \"updated2\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "update z",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has elements\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(1);",
							"});",
							"",
							"pm.environment.set(\"commitId4\", pm.response.json().elements[0]._commitId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"z\",\n\t\t\t\"name\": \"updated3\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "check ref commit history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has 4 commits\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits.length).to.eql(4);",
							"});",
							"",
							"pm.test(\"commit history is right\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits[0].id).to.eql(pm.environment.get(\"commitId4\"))",
							"    pm.expect(jsonData.commits[1].id).to.eql(pm.environment.get(\"commitId3\"))",
							"    pm.expect(jsonData.commits[2].id).to.eql(pm.environment.get(\"commitId2\"))",
							"    pm.expect(jsonData.commits[3].id).to.eql(pm.environment.get(\"commitId1\"))",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/commits",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"commits"
					]
				}
			},
			"response": []
		},
		{
			"name": "check x commit history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has 3 commits\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits.length).to.eql(3);",
							"});",
							"",
							"pm.test(\"commit history is right\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits[0].id).to.eql(pm.environment.get(\"commitId3\"))",
							"    pm.expect(jsonData.commits[1].id).to.eql(pm.environment.get(\"commitId2\"))",
							"    pm.expect(jsonData.commits[2].id).to.eql(pm.environment.get(\"commitId1\"))",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/elements/x/commits",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"elements",
						"x",
						"commits"
					]
				}
			},
			"response": []
		},
		{
			"name": "check y commit history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has 2 commits\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits.length).to.eql(2);",
							"});",
							"",
							"pm.test(\"commit history is right\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits[0].id).to.eql(pm.environment.get(\"commitId3\"))",
							"    pm.expect(jsonData.commits[1].id).to.eql(pm.environment.get(\"commitId1\"))",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/elements/y/commits",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"elements",
						"y",
						"commits"
					]
				}
			},
			"response": []
		},
		{
			"name": "check z commit history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has 2 commits\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits.length).to.eql(2);",
							"});",
							"",
							"pm.test(\"commit history is right\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits[0].id).to.eql(pm.environment.get(\"commitId4\"))",
							"    pm.expect(jsonData.commits[1].id).to.eql(pm.environment.get(\"commitId1\"))",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/elements/z/commits",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"elements",
						"z",
						"commits"
					]
				}
			},
			"response": []
		},
		{
			"name": "check first commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"first commit has 3 added\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits[0].added.length).to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/commits/{{commitId1}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"commits",
						"{{commitId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get elements at second update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"elements have expected names\", function () {",
							"    var jsonData = pm.response.json();",
							"    for (var e in jsonData.elements) {",
							"        var el = jsonData.elements[e];",
							"        if (el.id == 'x') {",
							"            pm.expect(el.name == 'updated2');",
							"        }",
							"        if (el.id == 'y') {",
							"            pm.expect(el.name == 'updated2');",
							"        }",
							"        if (el.id == 'z') {",
							"            pm.expect(el.name == 'z');",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"y\"\n\t\t}, {\n\t\t\t\"id\": \"z\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/elements?commitId={{commitId3}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"elements"
					],
					"query": [
						{
							"key": "commitId",
							"value": "{{commitId3}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create branch refa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"branch created with right parentRef and commit id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.refs[0].id).to.eql('refa');",
							"    pm.expect(jsonData.refs[0].parentRefId).to.eql('master');",
							"    pm.expect(jsonData.refs[0].parentCommitId).to.eql(pm.environment.get(\"commitId4\"))",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"refs\": [\n\t\t{\n\t\t\t\"id\": \"refa\",\n\t\t\t\"name\": \"refa\",\n\t\t\t\"type\": \"Branch\",\n\t\t\t\"extraField\": \"something\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs"
					]
				}
			},
			"response": []
		},
		{
			"name": "get branch refa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"branch refa has extraField\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.refs[0].extraField).to.eql('something');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa"
					]
				}
			},
			"response": []
		},
		{
			"name": "create invalid branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"refs\": [\n\t\t{\n\t\t\t\"id\": \"invalid branch id\",\n\t\t\t\"name\": \"invalid branch\",\n\t\t\t\"type\": \"Branch\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs"
					]
				}
			},
			"response": []
		},
		{
			"name": "create branch ref-a",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"refs\": [\n\t\t{\n\t\t\t\"id\": \"ref-a\",\n\t\t\t\"name\": \"ref-a\",\n\t\t\t\"type\": \"Branch\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs"
					]
				}
			},
			"response": []
		},
		{
			"name": "create branch ref-b from ref-a",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"refs\": [\n\t\t{\n\t\t\t\"id\": \"ref-b\",\n\t\t\t\"name\": \"ref-b\",\n\t\t\t\"type\": \"Branch\",\n\t\t\t\"parentRefId\": \"ref-a\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs"
					]
				}
			},
			"response": []
		},
		{
			"name": "check inRefIds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"elements in new ref have right _inRefIds\", function () {",
							"    var jsonData = pm.response.json();",
							"    jsonData.elements.forEach(function(e) {",
							"        pm.expect(e._inRefIds).to.include('refa');",
							"        pm.expect(e._refId).to.equal('refa');",
							"    })",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "check response element _refId matches request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"return element in new ref have right _refId\", function () {",
							"    var jsonData = pm.response.json();",
							"    jsonData.elements.forEach(function(e) {",
							"        pm.expect(e._refId).to.equal('refa');",
							"    })",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements/x",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements",
						"x"
					]
				}
			},
			"response": []
		},
		{
			"name": "update x and y on refa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has elements\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(2);",
							"});",
							"",
							"pm.environment.set(\"commitXYRef\", pm.response.json().elements[0]._commitId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\",\n\t\t\t\"name\": \"updated4\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"y\",\n\t\t\t\"name\": \"updated4\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "get current elements at refa before updating them",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"return latest elements on refa\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commitId).to.eql(pm.environment.get(\"commitXYRef\"))",
							"",
							"    pm.environment.set(\"commitXYRefElements\", pm.response.json());",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "update z on refa and add element q",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has elements\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(2);",
							"});",
							"",
							"pm.environment.set(\"commitZQRef\", pm.response.json().elements[0]._commitId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"z\",\n\t\t\t\"name\": \"updated5\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"q\",\n\t\t\t\"name\": \"q\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "create branch from invalid parentCommitId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"refs\": [\n    {\n      \"name\": \"branch_from_commit\",\n      \"type\": \"Branch\",\n      \"parentCommitId\": \"invalid\",\n      \"id\": \"branch_from_commit\"\n    }\n  ]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs"
					]
				}
			},
			"response": []
		},
		{
			"name": "create branch from commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"branch created from parentCommitId\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.refs[0].id).to.eql('branch_from_commit_id');",
							"    pm.expect(jsonData.refs[0].parentRefId).to.eql('refa');",
							"    pm.expect(jsonData.refs[0].type).to.eql('Branch');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"refs\": [\n    {\n      \"name\": \"branch_from_commit\",\n      \"type\": \"Branch\",\n      \"parentCommitId\": \"{{commitXYRef}}\",\n      \"id\": \"branch_from_commit_id\"\n    }\n  ]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs"
					]
				}
			},
			"response": []
		},
		{
			"name": "create tag from commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"branch created from parentCommitId\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.refs[0].id).to.eql('tag_from_commit_id');",
							"    pm.expect(jsonData.refs[0].parentRefId).to.eql('refa');",
							"    pm.expect(jsonData.refs[0].type).to.eql('Tag');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"refs\": [\n    {\n      \"name\": \"tag_from_commit\",\n      \"type\": \"Tag\",\n      \"parentCommitId\": \"{{commitXYRef}}\",\n      \"id\": \"tag_from_commit_id\"\n    }\n  ]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs"
					]
				}
			},
			"response": []
		},
		{
			"name": "check elements from branch made from commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Commit in ref match commit before updating refa\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commitId).to.eql(pm.environment.get('commitXYRef'));",
							"});",
							"",
							"pm.test(\"Elements made in ref match what was created under commit\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.equal(pm.environment.get('commitXYRefElements'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/branch_from_commit_id/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"branch_from_commit_id",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "check elements from tag made from commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Commit in ref match commit before updating refa\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commitId).to.eql(pm.environment.get('commitXYRef'));",
							"});",
							"",
							"pm.test(\"Elements made in ref match what was created under commit\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.equal(pm.environment.get('commitXYRefElements'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/tag_from_commit_id/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"tag_from_commit_id",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "update z on master and add element p",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has elements\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(2);",
							"});",
							"",
							"pm.environment.set(\"commitZP\", pm.response.json().elements[0]._commitId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"z\",\n\t\t\t\"name\": \"updated6\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"p\",\n\t\t\t\"name\": \"p\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "get elements at commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"commit id matches before updating refa\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commitId).to.eql(pm.environment.get(\"commitXYRef\"))",
							"});",
							"",
							"pm.test(\"elements in refa match resutls before updating refa\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(pm.response.json()).to.equal(pm.environment.get('commitXYRefElements'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements?commitId={{commitXYRef}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements"
					],
					"query": [
						{
							"key": "commitId",
							"value": "{{commitXYRef}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "check master commit history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has 5 commits\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits.length).to.eql(5);",
							"});",
							"",
							"pm.test(\"commit history is right\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits[0].id).to.eql(pm.environment.get(\"commitZP\"))",
							"    pm.expect(jsonData.commits[1].id).to.eql(pm.environment.get(\"commitId4\"))",
							"    pm.expect(jsonData.commits[2].id).to.eql(pm.environment.get(\"commitId3\"))",
							"    pm.expect(jsonData.commits[3].id).to.eql(pm.environment.get(\"commitId2\"))",
							"    pm.expect(jsonData.commits[4].id).to.eql(pm.environment.get(\"commitId1\"))",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/commits",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"commits"
					]
				}
			},
			"response": []
		},
		{
			"name": "check refa commit history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has 6 commits\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits.length).to.eql(6);",
							"});",
							"",
							"pm.test(\"commit history is right\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits[0].id).to.eql(pm.environment.get(\"commitZQRef\"))",
							"    pm.expect(jsonData.commits[1].id).to.eql(pm.environment.get(\"commitXYRef\"))",
							"    pm.expect(jsonData.commits[2].id).to.eql(pm.environment.get(\"commitId4\"))",
							"    pm.expect(jsonData.commits[3].id).to.eql(pm.environment.get(\"commitId3\"))",
							"    pm.expect(jsonData.commits[4].id).to.eql(pm.environment.get(\"commitId2\"))",
							"    pm.expect(jsonData.commits[5].id).to.eql(pm.environment.get(\"commitId1\"))",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/commits",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"commits"
					]
				}
			},
			"response": []
		},
		{
			"name": "check x commit history on refa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has 3 commits\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits.length).to.eql(4);",
							"});",
							"",
							"pm.test(\"commit history is right\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits[0].id).to.eql(pm.environment.get(\"commitXYRef\"))",
							"    pm.expect(jsonData.commits[1].id).to.eql(pm.environment.get(\"commitId3\"))",
							"    pm.expect(jsonData.commits[2].id).to.eql(pm.environment.get(\"commitId2\"))",
							"    pm.expect(jsonData.commits[3].id).to.eql(pm.environment.get(\"commitId1\"))",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements/x/commits",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements",
						"x",
						"commits"
					]
				}
			},
			"response": []
		},
		{
			"name": "check y commit history on refa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has 3 commits\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits.length).to.eql(3);",
							"});",
							"",
							"pm.test(\"commit history is right\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits[0].id).to.eql(pm.environment.get(\"commitXYRef\"))",
							"    pm.expect(jsonData.commits[1].id).to.eql(pm.environment.get(\"commitId3\"))",
							"    pm.expect(jsonData.commits[2].id).to.eql(pm.environment.get(\"commitId1\"))",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements/y/commits",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements",
						"y",
						"commits"
					]
				}
			},
			"response": []
		},
		{
			"name": "check z commit history on refa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has 3 commits\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits.length).to.eql(3);",
							"});",
							"",
							"pm.test(\"commit history is right\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits[0].id).to.eql(pm.environment.get(\"commitZQRef\"))",
							"    pm.expect(jsonData.commits[1].id).to.eql(pm.environment.get(\"commitId4\"))",
							"    pm.expect(jsonData.commits[2].id).to.eql(pm.environment.get(\"commitId1\"))",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements/z/commits",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements",
						"z",
						"commits"
					]
				}
			},
			"response": []
		},
		{
			"name": "get latest elements at refa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"has 4 results\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"y\"\n\t\t}, {\n\t\t\t\"id\": \"z\"\n\t\t},{\n\t\t\t\"id\": \"q\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "get latest elements at master",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"has 4 results\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"y\"\n\t\t}, {\n\t\t\t\"id\": \"z\"\n\t\t},{\n\t\t\t\"id\": \"q\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "get mix of elements at master with missing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"has 3 results and 1 rejected\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(3);",
							"    pm.expect(jsonData.rejected.length).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"y\"\n\t\t}, {\n\t\t\t\"id\": \"z\"\n\t\t},{\n\t\t\t\"id\": \"q\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/master/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"master",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "get mix of elements at refa with commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"has 3 results and 2 rejected\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(3);",
							"    pm.expect(jsonData.rejected.length).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"y\"\n\t\t}, {\n\t\t\t\"id\": \"z\"\n\t\t},{\n\t\t\t\"id\": \"q\"\n\t\t}, {\n\t\t\t\"id\": \"p\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements?commitId={{commitXYRef}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements"
					],
					"query": [
						{
							"key": "commitId",
							"value": "{{commitXYRef}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete x on refa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements/x",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements",
						"x"
					]
				}
			},
			"response": []
		},
		{
			"name": "get x on refa deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 410\", function () {",
							"    pm.response.to.have.status(410);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements/x",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements",
						"x"
					]
				}
			},
			"response": []
		},
		{
			"name": "resurrect x on refa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response has element\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\",\n\t\t\t\"name\": \"updated4\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "get resurrected x on refa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response has element\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements/x",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements",
						"x"
					]
				}
			},
			"response": []
		},
		{
			"name": "add ownerId for cameo element on refa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\",\n\t\t\t\"name\": \"updated7\",\n\t\t\t\"ownerId\": \"z\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/refa/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"refa",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "add org b",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has org a\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.orgs[0].id).to.eql('b');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"orgs\": [\n\t\t{\n\t\t\t\"id\": \"b\",\n\t\t\t\"name\": \"b\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/orgs",
					"host": [
						"{{host}}"
					],
					"path": [
						"orgs"
					]
				}
			},
			"response": []
		},
		{
			"name": "add project cc under org b",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has project cc\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.projects[0].id).to.eql('cc');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"projects\": [\n\t\t{\n\t\t\t\"id\": \"cc\", \n\t\t\t\"name\": \"cc\",\n\t\t\t\"orgId\": \"b\",\n\t\t\t\"schema\": \"default\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create branch del under cc with no commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 400, cannot make branch in empty project\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"refs\": [\n\t\t{\n\t\t\t\"id\": \"del\",\n\t\t\t\"name\": \"del\",\n\t\t\t\"type\": \"Branch\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/cc/refs",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"cc",
						"refs"
					]
				}
			},
			"response": []
		},
		{
			"name": "make a commit on project cc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"random\", \n\t\t\t\"name\": \"random\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/cc/refs/master/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"cc",
						"refs",
						"master",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "create branch del under cc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"branch created\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.refs[0].id).to.eql('del');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"refs\": [\n\t\t{\n\t\t\t\"id\": \"del\",\n\t\t\t\"name\": \"del\",\n\t\t\t\"type\": \"Branch\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/cc/refs",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"cc",
						"refs"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete branch del",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"branch deleted\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.refs[0].id).to.eql('del');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/projects/cc/refs/del",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"cc",
						"refs",
						"del"
					]
				}
			},
			"response": []
		},
		{
			"name": "get deleted branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"  ",
							"pm.test(\"Status code is 410\", function () {",
							"    pm.response.to.have.status(410);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/projects/cc/refs/del",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"cc",
						"refs",
						"del"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete branch master",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/projects/cc/refs/master",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"cc",
						"refs",
						"master"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete project cc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"project soft deleted\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.projects[0].id).to.eql('cc');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/projects/cc",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"cc"
					]
				}
			},
			"response": []
		},
		{
			"name": "get project cc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 410\", function () {",
							"    pm.response.to.have.status(410);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/projects/cc",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"cc"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete org b",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400, org not empty\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/orgs/b",
					"host": [
						"{{host}}"
					],
					"path": [
						"orgs",
						"b"
					]
				}
			},
			"response": []
		},
		{
			"name": "hard delete project cc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"project hard deleted\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.projects[0].id).to.eql('cc');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/projects/cc?hard=true",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"cc"
					],
					"query": [
						{
							"key": "hard",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete empty org b",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/orgs/b",
					"host": [
						"{{host}}"
					],
					"path": [
						"orgs",
						"b"
					]
				}
			},
			"response": []
		},
		{
			"name": "get org b",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/orgs/b",
					"host": [
						"{{host}}"
					],
					"path": [
						"orgs",
						"b"
					]
				}
			},
			"response": []
		},
		{
			"name": "recreate project cc under org a",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has project cc\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.projects[0].id).to.eql('cc');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"projects\": [\n\t\t{\n\t\t\t\"id\": \"cc\", \n\t\t\t\"name\": \"cc\",\n\t\t\t\"orgId\": \"a\",\n\t\t\t\"schema\": \"default\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create webhook on project aa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"webhook created with returned id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.webhooks[0]).to.have.property('id');",
							"});",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"webhooks\": [\n\t\t{\"url\": \"https://random.org\"}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/webhooks",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"webhooks"
					]
				}
			},
			"response": []
		},
		{
			"name": "get webhooks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"project aa has one webhook\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.webhooks[0]).to.have.property('id');",
							"    pm.expect(jsonData.webhooks.length).to.eql(1);",
							"});",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/projects/aa/webhooks",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"webhooks"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete webhook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"webhooks\": [\n\t\t{\"url\": \"https://random.org\"}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/webhooks",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"webhooks"
					]
				}
			},
			"response": []
		},
		{
			"name": "get webhooks again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"project aa has no webhooks\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.webhooks.length).to.eql(0);",
							"});",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/projects/aa/webhooks",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"webhooks"
					]
				}
			},
			"response": []
		},
		{
			"name": "add project with invalid schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"projects\": [\r\n    {\r\n      \"orgId\": \"a\",\r\n      \"name\": \"string\",\r\n      \"id\": \"string\",\r\n      \"schema\":\"invalid\"\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/projects",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "add org c without id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has org c\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.orgs[0].name).to.eql('c');",
							"});",
							"",
							"pm.environment.set(\"orgIdC\", pm.response.json().orgs[0].id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"orgs\": [\n\t\t{\n\t\t\t\"name\": \"c\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/orgs",
					"host": [
						"{{host}}"
					],
					"path": [
						"orgs"
					]
				}
			},
			"response": []
		},
		{
			"name": "get org c",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"org id number is right\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.orgs[0].id).to.eql(pm.environment.get(\"orgIdC\"))",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/orgs/{{orgIdC}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"orgs",
						"{{orgIdC}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add project random to org c without id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has project random\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.projects[0].name).to.eql('random');",
							"});",
							"",
							"pm.environment.set(\"projectRandomId\", pm.response.json().projects[0].id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"projects\": [\n\t\t{\n\t\t\t\"name\": \"random\",\n\t\t\t\"orgId\": \"{{orgIdC}}\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "get org c projects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has 1 project random\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.projects.length).to.eql(1);",
							"    pm.expect(jsonData.projects[0].name).to.eql('random');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/projects?orgId={{orgIdC}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects"
					],
					"query": [
						{
							"key": "orgId",
							"value": "{{orgIdC}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add element random to project random without id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has element random\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements[0].name).to.eql('random');",
							"});",
							"",
							"pm.environment.set(\"elementRandomId\", pm.response.json().elements[0].id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"name\": \"random\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/{{projectRandomId}}/refs/master/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"{{projectRandomId}}",
						"refs",
						"master",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "create ref without id on project random",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has ref random\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.refs[0].name).to.eql('random');",
							"});",
							"",
							"pm.environment.set(\"refRandomId\", pm.response.json().refs[0].id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"refs\": [\n\t\t{\n\t\t\t\"name\": \"random\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/{{projectRandomId}}/refs",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"{{projectRandomId}}",
						"refs"
					]
				}
			},
			"response": []
		},
		{
			"name": "get random element in random ref",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"element is there\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements[0].name).to.eql('random');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/projects/{{projectRandomId}}/refs/{{refRandomId}}/elements/{{elementRandomId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"{{projectRandomId}}",
						"refs",
						"{{refRandomId}}",
						"elements",
						"{{elementRandomId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add project to nonexistent org",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"projects\": [\n\t\t{\n\t\t\t\"name\": \"bad\",\n\t\t\t\"orgId\": \"missing\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "add project without org",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"projects\": [\n\t\t{\n\t\t\t\"name\": \"bad\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create branch from commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"refs\": [\n\t\t{\n\t\t\t\"name\": \"bad\",\n\t\t\t\"parentCommitId\": \"bad\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs"
					]
				}
			},
			"response": []
		},
		{
			"name": "create branch from nonexistent ref",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"refs\": [\n\t\t{\n\t\t\t\"name\": \"bad\",\n\t\t\t\"parentRefId\": \"missing\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs"
					]
				}
			},
			"response": []
		},
		{
			"name": "post elements to nonexistent project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"name\": \"bad\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aaa/refs/master/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aaa",
						"refs",
						"master",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "post elements to nonexistent ref",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"name\": \"bad\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/missing/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"missing",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "get nonexistent project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/projects/zz",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"zz"
					]
				}
			},
			"response": []
		},
		{
			"name": "get nonexistent ref",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/projects/aa/refs/missing",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"missing"
					]
				}
			},
			"response": []
		},
		{
			"name": "get element in nonexistent ref",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/projects/aa/refs/missing/elements/asdf",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"missing",
						"elements",
						"asdf"
					]
				}
			},
			"response": []
		},
		{
			"name": "get nonexistent commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/projects/aa/commits/missing",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"commits",
						"missing"
					]
				}
			},
			"response": []
		},
		{
			"name": "create branch with long id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"refs\": [\n\t\t{\n\t\t\t\"name\": \"long\",\n            \"id\": \"a123456789012345678901234567890123456789012345678901234567890\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs"
					]
				}
			},
			"response": []
		},
		{
			"name": "post to long branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"name\": \"blah\",\n\t\t\t\"id\": \"blah\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/aa/refs/a123456789012345678901234567890123456789012345678901234567890/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"aa",
						"refs",
						"a123456789012345678901234567890123456789012345678901234567890",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "create project zz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"projects\": [\n\t\t{\n\t\t\t\"id\": \"zz\", \n\t\t\t\"name\": \"zz\",\n\t\t\t\"orgId\": \"a\",\n\t\t\t\"schema\": \"default\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "add elements to project zz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\",\n\t\t\t\"name\": \"x\"\n\t\t}, {\n\t\t\t\"id\": \"y\", \n\t\t\t\"name\": \"y\"\n\t\t}, {\n\t\t\t\"id\": \"z\",\n\t\t\t\"name\": \"z\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/zz/refs/master/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"zz",
						"refs",
						"master",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "update and delete elements in same commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response has elements\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements.length).to.eql(2);",
							"    pm.expect(jsonData.deleted.length).to.eql(1);",
							"});",
							"",
							"pm.environment.set(\"hybridCommit\", pm.response.json().commitId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\",\n\t\t\t\"name\": \"xx\"\n\t\t}, {\n\t\t\t\"id\": \"y\", \n\t\t\t\"name\": \"yy\"\n\t\t}\n\t],\n    \"deletes\": [{\"id\": \"z\"}]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/zz/refs/master/elements",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"zz",
						"refs",
						"master",
						"elements"
					]
				}
			},
			"response": []
		},
		{
			"name": "get deleted element",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 410\", function () {",
							"    pm.response.to.have.status(410);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\",\n\t\t\t\"name\": \"xx\"\n\t\t}, {\n\t\t\t\"id\": \"y\", \n\t\t\t\"name\": \"yy\"\n\t\t}\n\t],\n    \"deletes\": [{\"id\": \"z\"}]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/zz/refs/master/elements/z",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"zz",
						"refs",
						"master",
						"elements",
						"z"
					]
				}
			},
			"response": []
		},
		{
			"name": "get commit object",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"commit has right data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.commits[0].updated.length).to.eql(2);",
							"    pm.expect(jsonData.commits[0].deleted.length).to.eql(1);",
							"",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"x\",\n\t\t\t\"name\": \"xx\"\n\t\t}, {\n\t\t\t\"id\": \"y\", \n\t\t\t\"name\": \"yy\"\n\t\t}\n\t],\n    \"deletes\": [{\"id\": \"z\"}]\n}"
				},
				"url": {
					"raw": "{{host}}/projects/zz/commits/{{hybridCommit}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"projects",
						"zz",
						"commits",
						"{{hybridCommit}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}