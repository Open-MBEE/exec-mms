buildscript {
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://repo.spring.io/plugins-release' }
    }
}

description = 'Model Management System Reference Implementation'

ext {
    commonDependencies = [
        'swagger-annotations'           : 'io.swagger.core.v3:swagger-annotations:2.1.2',
        'hibernate-core'                : 'org.hibernate:hibernate-core:5.4.14.Final',
        'servlet-api'                   : 'javax.servlet:javax.servlet-api:4.0.1',
        'slf4j-api'                     : 'org.slf4j:slf4j-api:1.7.30',
        'spring-boot'                   : "org.springframework.boot:spring-boot:$springBootVersion",
        'spring-security-core'          : "org.springframework.security:spring-security-core:$springSecurityVersion",
        'spring-security-config'        : "org.springframework.security:spring-security-config:$springSecurityVersion",
        'spring-security-web'           : "org.springframework.security:spring-security-web:$springSecurityVersion",
        'spring-security-ldap'          : "org.springframework.security:spring-security-ldap:$springSecurityVersion",
        'spring-tx'                     : "org.springframework:spring-tx:$springFrameworkVersion",
        'spring-webmvc'                 : "org.springframework:spring-webmvc:$springFrameworkVersion",
        'spring-aspects'                : "org.springframework:spring-aspects:$springFrameworkVersion",
        'spring-data-commons'           : "org.springframework.data:spring-data-commons:$springDataVersion",
        'spring-data-jpa'               : "org.springframework.data:spring-data-jpa:$springDataVersion",
        'jackson-annotations'           : "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
        'jackson-databind'              : "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
        'jackson-datatype-hibernate5'   : "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:$jacksonVersion",
        'jackson-datatype-jsr310'       : "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion",
        'spring-boot-starter-test'      : 'org.springframework.boot:spring-boot-starter-test:2.2.4.RELEASE'
    ]
}

String buildTag = project.getProperties().get('buildTag')
if (buildTag != null && !buildTag.isEmpty() && buildTag != version) {
    throw new GradleException('Version mismatch: '+buildTag+' vs '+version)
}
if (buildTag == null || buildTag.isEmpty() || project.getProperties().getOrDefault('artifactoryRepository', '').toLowerCase().contains('snapshot')) {
    version += '-SNAPSHOT'
}
ext.snapshotBuild = version.contains("SNAPSHOT")
ext.releaseBuild = !version.contains("SNAPSHOT")
ext.milestoneBuild = !(snapshotBuild || releaseBuild)

subprojects {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://repo.spring.io/plugins-release' }
    }

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'signing'

    group = "org.openmbee.mms"
    version = rootProject.version

    Map<String, String> commonDependencies = rootProject.ext.commonDependencies

    task javadocJar(type: Jar) {
        archiveClassifier = "javadoc"
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    artifacts {
        archives jar, javadocJar, sourcesJar
    }

    //https://docs.gradle.org/current/userguide/publishing_maven.html
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from project.components.java
                pom {
                    name = project.name
                    description = project.name + ', a module of the MMS'
                    url = 'http://github.com/OpenMBEE/mms'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'huijun'
                            name = 'Jason Han'
                        }
                        developer {
                            id = 'dlam'
                            name = 'Doris Lam'
                        }
                        developer {
                            id = 'ward'
                            name = 'Ward Schweitzer'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/Open-MBEE/mms.git'
                        developerConnection = 'scm:git:https://github.com/Open-MBEE/mms.git'
                        url = 'https://github.com/Open-MBEE/mms.git'
                    }
                }
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                    credentials {
                        username = ossrhUsername
                        password = ossrhPassword
                    }
                }
            }
        }

        configurations.all {
            exclude group: "org.slf4j", module: "slf4j-log4j12"
            exclude group: "log4j", module: "log4j"
        }
    }

    signing {
        if (project.hasProperty('signing.keyId') && project.hasProperty('signing.password') && project.hasProperty('signing.secretKeyRingFile')) {
            sign publishing.publications.mavenJava
        } else if (project.hasProperty('signingKey') && project.hasProperty('signingPassword')) {
            def signingKey = signingKey.replaceAll(/\\n/, "\n")
            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications.mavenJava
        }
    }
}
